import { NextResponse } from 'next/server'
import { PDFDocument, StandardFonts, rgb } from 'pdf-lib'

export async function POST(request: Request) {
  try {
    const analysis = await request.json()

    const pdfDoc = await PDFDocument.create()
    const page = pdfDoc.addPage([612, 792])
    const { height } = page.getSize()

    const font = await pdfDoc.embedFont(StandardFonts.Helvetica)
    const fontSize = 12
    let cursorY = height - 50

    const writeLine = (text: string, offset = 18) => {
      page.drawText(text, { x: 50, y: cursorY, size: fontSize, font, color: rgb(0, 0, 0) })
      cursorY -= offset
    }

    writeLine('INDEPENDENTLY - CAREER ROADMAP', 24)
    writeLine('================================', 24)

    // Hidden Careers
    writeLine('YOUR HIDDEN CAREER MATCHES:', 18)
    analysis.hiddenCareers?.forEach((c: any, i: number) => {
      writeLine(`${i + 1}. ${c.title}`)
      writeLine(`   Why You're Qualified: ${c.matchReason}`)
      writeLine(`   Salary Range: ${c.salaryRange}`)
      writeLine(`   Transition Difficulty: ${c.transitionDifficulty}`, 24)
    })

    // Skill Gaps
    writeLine('PRIORITY SKILL GAPS:', 18)
    analysis.skillGaps?.forEach((s: any, i: number) => {
      writeLine(`${i + 1}. ${s.skill} (${s.priority} priority)`)
      writeLine(`   Importance: ${s.reason}`)
      writeLine(`   Resources: ${s.resources?.join(', ')}`, 24)
    })

    // Action Plan
    writeLine('90-DAY ACTION PLAN:', 18)
    writeLine(`Weeks 1-4: ${analysis.actionPlan?.weeks1To4}`)
    writeLine(`Weeks 5-8: ${analysis.actionPlan?.weeks5To8}`)
    writeLine(`Weeks 9-12: ${analysis.actionPlan?.weeks9To12}`, 24)

    // Salary Projections
    writeLine('SALARY PROJECTIONS:', 18)
    writeLine(`Current: $${analysis.salaryProjections?.current?.toLocaleString()}`)
    writeLine(`In 90 Days: $${analysis.salaryProjections?.in90Days?.toLocaleString()}`)
    writeLine(`In 1 Year: $${analysis.salaryProjections?.in1Year?.toLocaleString()}`, 24)

    // Certifications
    writeLine('CERTIFICATIONS:', 18)
    analysis.certifications?.forEach((cert: any, i: number) => {
      writeLine(`${i + 1}. ${cert.name}`)
      writeLine(`   Cost: $${cert.cost} | Duration: ${cert.duration}`)
      writeLine(`   ROI: ${cert.roi} | Salary Impact: +$${cert.salaryImpact?.toLocaleString()}`, 24)
    })

    // Footer
    writeLine(`Generated by Independently`, 24)
    writeLine(`${new Date().toLocaleDateString()}`)

    const pdfBytes = await pdfDoc.save()
    const pdfBuffer = Buffer.from(pdfBytes)

    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'attachment; filename="career-roadmap.pdf"',
        'Content-Length': pdfBuffer.length.toString(),
      },
    })
  } catch (error) {
    console.error('PDF generation failed:', error)
    return NextResponse.json({ error: 'Failed to generate career roadmap' }, { status: 500 })
  }
}
